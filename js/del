var scene = new THREE.Scene();
//scene.background = new THREE.Color( 0xffffff );
var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 10000 );
var mouse, raycaster;
var meshes = [],
		meshes2 = [],
		letters = [],
		basicObjects = [],
		objects = [],
		objectso = [];
var letter, basicobj;

var mixers = [], mixers2 = [];
var clock = new THREE.Clock();
var srocks, radial, parent;
//var bgMat, bgGeo, bg;

var allTweens = {};
var controls;
var renderer = new THREE.WebGLRenderer({ alpha:true, antialias:true,preserveDrawingBuffer:false });
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setClearColor(0x000000, 0);
renderer.autoClear = false;
document.body.appendChild( renderer.domElement );

camera.position.y = 100;
camera.position.z = 200;

var startColor;

var coord = [ -400, -200, 0, 200, 400 ];

function loadTex (geometry,textureJSON) {
  return new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( textureJSON ) );
}

function loaderFn(i) {
	var conf = getConfig();
	return function(group) {
		let geometry = group.children[ 0 ].geometry;
		geometry.attributes.uv2 = geometry.attributes.uv;
		var mesh;
		var mirroredMesh;
		if (conf[i.toString()]) {
			mesh = loadTex(geometry,conf[i.toString()]);
		} else {
			mesh = loadTex(geometry,conf["default"]);
		}

		mesh.scale.multiplyScalar( 1 );
		mesh.position.x = 0;
		mesh.position.z = 1500;
		mesh.position.y = 70;
		mesh.scale.x = 50;
		mesh.scale.y = 50;
		mesh.scale.z = 50;

		mesh.traverse( function( node ) {
				if( node.ref ) {
			node.material.side = THREE.DoubleSide;
				}
		}); /*
		mesh.traverse(function (child) {
				if (child instanceof THREE.Mesh) {
			child.geometry.computeVertexNormals();
			child.material.shading = THREE.SmoothShading;
				}
		}); */
		mesh.traverse(function (child) {
				if (child instanceof THREE.Mesh) {
			child.geometry.computeFaceNormals();
				}
		});

		scene.add( mesh );
		meshes.push( mesh );
		mesh.index = i;
		mesh.tweenIntroFn = tweenIntro(mesh,mesh.index,i,i*2,.01,1);

		console.log(meshes.length);

		var temp = meshes.lastIndexOf(mesh);
		var array1 = [];
		array1.push(temp);
		var mirror = [11,12,13,14]
		// adding rest of numbers
		for (var k = 0; k < 16; k++) {
			n = k + 17;
			mirror.push(n);
		}
		for (var k = 0; k <7; k++){
			n = k + 34;
			mirror.push(n);
		}
		//console.log(mirror);

		let found = array1.some(r=> mirror.includes(r));

		//if (meshes.lastIndexOf(mesh) == 11) {
		//if (found = true) {
		if (mirror.indexOf(temp) === -1) {
				console.log("not in array");
		}	else {
				console.log("in array");
				mirroredMesh = new THREE.Mesh( mesh.geometry, mesh.material );
				mirroredMesh.position.set( 0, 70, 1500 );
				mirroredMesh.scale.set(mesh.scale.x,mesh.scale.y,mesh.scale.z);
				mirroredMesh.scale.x = -50;
				scene.add( mirroredMesh );
				meshes2.push(mirroredMesh);
				mirroredMesh.index = i;
				mirroredMesh.tweenIntroFn2 = tweenIntro(mirroredMesh,mesh.index,i,44,.01,-1);
		}
		// x amount of objects
		if (i=42) { meshes.forEach(mesh => { mesh.tweenIntroFn(); });}
		if (i=42) { meshes2.forEach(mirroredMesh => { mirroredMesh.tweenIntroFn2();});}
		//console.log(meshes2.length);
	}

}

function init() {
	scene.add( new THREE.AmbientLight( 0x4d4d4d ) );
	var light = new THREE.SpotLight( 0xffffff, 0.4 );
	light.position.set( 0, 0, 4000 );
	scene.add(light);

	var light = new THREE.DirectionalLight( 0xffffff, .65, 100 );
	light.position.set( 0, 1, .15 ); 			//default; light shining from top
	light.castShadow = true;            // default false
	scene.add( light );

	var light = new THREE.DirectionalLight( 0xffffff, .97, 100 );
	light.position.set( 1.5, 0, .15 ); 			//default; light shining from top
	light.castShadow = true;            // default false
	scene.add( light );

	var light = new THREE.DirectionalLight( 0xffffff, .97, 100 );
	light.position.set( -2.5, .2, .05 ); 			//default; light shining from top
	light.castShadow = true;            // default false
	scene.add( light );

	var geometry = new THREE.BoxGeometry( 40, 40, 40 );
	var geometry = new THREE.PlaneGeometry( 140, 225, 40 );

	var outlineCoord = [ -400, -20];

	var loader = new THREE.OBJLoader();
	/*
	var textureIndex = [];
	for (i=0;i<12;i++) { textureIndex.push(i+1); }
	var tex_tri = new THREE.TextureLoader().load( 'textures/UV1.jpg' );
	var tex_center = new THREE.TextureLoader().load( 'textures/UV2.jpg' );
	var tex_bottom = new THREE.TextureLoader().load( 'textures/UV3.jpg' );
	*/

	var conf = getConfig();

	for (var i = 0; i < 42; i++) {
		console.log("iiiiiiiiiiiiiiiiiiii",i);
		loader.load( "obj/"+i+".obj", loaderFn(i));

	}

	//loader.load( "obj/ball2.obj", loaderFn(41));
	//loader.load( "obj/string.obj", loaderFn(42));
	//loader.load( "obj/ball.obj", loaderFn(42));
	//loader.load( "obj/nCache/circle1.obj", loaderFn(42));
	//meshes[41].rotation.x = .1;

	// parent
	parent = new THREE.Object3D();
	scene.add( parent );
	// pivots
	var pivot1 = new THREE.Object3D();
	//var pivot2 = new THREE.Object3D();
	//var pivot3 = new THREE.Object3D();
	pivot1.rotation.z = 0;
	//pivot2.rotation.z = 2 * Math.PI / 3;
	//pivot3.rotation.z = 4 * Math.PI / 3;
	parent.add( pivot1 );
	//parent.add( pivot2 );
	//parent.add( pivot3 );

	// mesh
	//var mesh1 = new THREE.Mesh( geometry, material );
	//var mesh2 = new THREE.Mesh( geometry, material );
	//var mesh3 = new THREE.Mesh( geometry, material );

	//mesh1.position.y = 5;
	//mesh2.position.y = 5;
	//mesh3.position.y = 5;

	//pivot1.add( mesh1 );
	//pivot2.add( mesh2 );
	//pivot3.add( mesh3 );

	//loader.load( "obj/nCache/objectsouter.obj", loaderFn(41));
	var defaultmat;
	function callLetters(){
		for (var i = 0; i < 9; i++) {
		  defaultmat = true;
			loader.load( "obj/letters/"+i+".obj", loaderLetters(i,5,-2000,-1000,defaultmat,pivot1));
			defaultmat = false;
			loader.load( "obj/nCache/smallobj.obj", loaderLetters(i,5*seed(1,5),-1500,-750,defaultmat,pivot1));
		}
	}

	for (var i = 0; i <2; i++) {
		callLetters();
	}

	let floorscl = 0;
	//let floormat = new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } );
	loader.load( "obj/nCache/floornew.obj", basicLoader(0,-70,-1000,floorscl,floorscl,floorscl,1,0));
	loader.load( "obj/43.obj", basicLoader(0,0,0,50,50,50,0,1));

	//loader.load( "obj/nCache/floornew.obj", basicLoader(0,-70,1000,3,3,3));

	/*
	var newMesh = meshes[10].clone();
	newMesh.scale.set(-50,50,50);

	var mesh2 = new THREE.Mesh( mesh.geometry, mesh.material );
    	mesh2.scale.set( -50, 50, 50 );
    	scene.add( mesh2 ); */

	for (var i = 0; i < 10; i++) {
		//var object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } ) );

		if (i<5) {
			//var texture = new THREE.TextureLoader().load( 'textures/'+(i+1)+'.jpg' );
			var texture = new THREE.TextureLoader().load( 'textures/xd.png' );
			var object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { map: texture, transparent: true, side: THREE.DoubleSide } ) );

			object.position.x = Math.random() * 100 - 50;
			object.position.y = Math.random() * 60 - 30;
			object.position.z = Math.random() * 80 - 40;

			object.scale.x = 0;
			object.scale.y = 0;
			object.scale.z = 0;

			scene.add( object );
			objects.push( object );
			object.castShadow = true;
			object.receiveShadow = true;
			object.index = i;
		} else {
			var texture = new THREE.TextureLoader().load( 'textures/outline.jpg' );
			var objectOutline = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xff0000,  map: texture, transparent: true, opacity: 0, side: THREE.DoubleSide } ) );

			objectOutline.position.x = (coord[i-5])*1.11;
			objectOutline.position.y = -172;
			objectOutline.position.z = -112;

			objectOutline.rotation.x = -1;

			objectOutline.scale.x = 1.15;
			objectOutline.scale.y = 1.15;
			objectOutline.scale.z = 1.15;

			//objectOutline.material.opacity = 0.7;

			scene.add( objectOutline );
			objectso.push( objectOutline );
		}


		// *** Should this stuff be outside of for loop?? ***
		object.setOpacityOnOutline = function (objectsOutline) {
			//objectsOutline.material.opacity = 0.25;
			new TWEEN.Tween( objectsOutline.material ).to( { opacity: 0.2 }, 259 ).start();
		}

		object.removeOpacityOnOutline = function (objectsOutline) {
			new TWEEN.Tween( objectsOutline.material ).to( { opacity: 0 }, 750 ).start();
		}

		object.setOutlineTween = function (objectsOutline) {
			let oscl = { x: 1.15, y: 1.15 },
			 		starget = { x: 1.3, y: 1.3 };
			new TWEEN.Tween( oscl ).to( starget, 250 ).onUpdate(function(){ objectsOutline.scale.x = oscl.x; objectsOutline.scale.y = oscl.y; }).start();
		}

		object.endOutlineTween = function (objectsOutline) {
			let oscl = { x: objectsOutline.scale.x, y: objectsOutline.scale.y },
			 		starget = { x: 1.15, y: 1.15 };
					console.log("Test");
			new TWEEN.Tween( oscl ).to( starget, 500 ).onUpdate(function(){ objectsOutline.scale.x = oscl.x; objectsOutline.scale.y = oscl.y; }).easing(TWEEN.Easing.Elastic.Out).start();
			console.log("Test2");
		}


	}

	var material = new THREE.MeshPhongMaterial( { color: 0xd0b26b, reflectivity: 0.75, envMap: envMap, overdraw: 0.99, reflectivity: 0.25, side: THREE.DoubleSide } );
	// FBX
	var loader = new THREE.FBXLoader();
	loader.load( 'obj/nCache/cube15.fbx', function ( srocks ) {
			console.log("fbx start");
			srocks.mixer = new THREE.AnimationMixer( srocks );
			mixers.push( srocks.mixer );
			console.log("fbx start3 - original",srocks, srocks.mixer);

			var action = srocks.mixer.clipAction( srocks.animations[ 0 ] );
			action.setLoop( THREE.LoopOnce );
			action.clampWhenFinished = true;
			action.play();

			srocks.traverse( function ( child ) {
				if ( child.isMesh ) {
					child.castShadow = true;
					child.receiveShadow = true;
					child.material = material;
				}
			} );
			//object.position.y = -354.315;
			console.log("fbx loaded");
			srocks.scale.set(0,0,0);
			//srocks.position.y = -125;
			srocks.position.z = -990;
			scene.add( srocks );
			tweenRocks(srocks);
			console.log("fbx added to scene");
	} );

	var loader = new THREE.FBXLoader();
	loader.load( 'obj/nCache/effect3.fbx', function ( effect ) {
			console.log("fbx start");
			effect.mixer = new THREE.AnimationMixer( effect );
			mixers.push( effect.mixer );
			console.log("fbx start3 - original",effect, effect.mixer);

			var action = effect.mixer.clipAction( effect.animations[ 0 ] );
			effect.mixer.timeScale = 48;
			action.setLoop( THREE.LoopOnce );
			action.clampWhenFinished = true;
			action.play();

			effect.traverse( function ( child ) {
				if ( child.isMesh ) {
					child.castShadow = true;
					child.receiveShadow = true;
					child.material = material;
				}
			} );
			//object.position.y = -354.315;
			console.log("fbx loaded");
			effect.scale.set(50,50,50);
			//srocks.position.y = -125;
			effect.position.z = -1000;
			scene.add( effect );
			//tweenRocks(srocks);
			console.log("fbx added to scene");
	} );



	var twirlMat = new THREE.MeshBasicMaterial( { color:0xffffff, map: twirlMap, alphaMap: twirlMap, transparent: true, opacity: 0.25*seed(1,7), envMap: envMap, overdraw: 0.99, reflectivity: 0.25, side: THREE.DoubleSide} );


			var geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );
			geometry.center();
			var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
			var torus = new THREE.Mesh( geometry, twirlMat );
			torus.scale.z = .25
			torus.rotation.x = 1.5;
			torus.position.y = -40;
			scene.add( torus );

			tweenEffects(torus);


	//launchTween2(5000);



  //loaderFbx("ball");


	/*
	 bgGeo = new THREE.PlaneGeometry( 20000, 20000, 1, 1 );

	 bgMat = new THREE.MeshBasicMaterial( { color: 0xffffff,  transparent:true, opacity:.75 } );
	 bg = new THREE.Mesh( bgGeo, bgMat);
	bg.position.z = -4000;
	scene.add( bg );
	*/

	// * Raycasting Tests *
	// add raycaster and mosue as 2D vector
	raycaster = new THREE.Raycaster();
	mouse = new THREE.Vector2();

	// add event listener for mouse and calls function when activated
	document.addEventListener( 'mousemove', onDocumentMouseMove, false);
	document.addEventListener( 'touchmove', onDocumentTouchStart, false);


	// **


	controls = new THREE.DragControls( objects, camera, renderer.domElement );
	controls.addEventListener( 'dragstart', dragStartCallback );
	controls.addEventListener( 'dragend', dragendCallback );

}

function animateIn(tmpMesh) {

		tweenIntro(tmpMesh,44,44,.01)();

}

function animateCardsIn(){
	launchCamTween();


	var t0 = tweenMove(objects[0],-315,0,1);
	var t1 = tweenMove(objects[1],-212.1,150,.5);
	var t2 = tweenMove(objects[2],0,200,0);
	var t3 = tweenMove(objects[3],212.1,150,-.5);
	var t4 = tweenMove(objects[4],315,0,-1);

	for(i=0;i<41;i++){
		tweenCamScale(meshes[i],i,1);
		if(meshes2[i] == undefined){

		} else {
			tweenCamScale(meshes2[i],i,-1);
		}
	}

	allTweens = {
		"t0" : t0,
		"t1" : t1,
		"t2" : t2,
		"t3" : t3,
		"t4" : t4
	}
}

function onDocumentTouchStart( event ) {
	event.preventDefault();

	event.clientX = event.touches[0].clientX;
	event.clientY = event.touches[0].clientY;
	onDocumentMouseMove( event );
}

var intersected = false;
var index;

function onDocumentMouseMove( event ) {
	event.preventDefault();

	mouse.x = (event.clientX / renderer.domElement.width ) * 2 - 1;
	mouse.y = - (event.clientY / renderer.domElement.height ) * 2 + 1;

	raycaster.setFromCamera( mouse, camera );

	for (var k = 0; k < objectso.length; k++){
		objectso[k].index = k;
	}

	var intersects = raycaster.intersectObjects( objectso );
	//console.log(objectso);
	var color = (Math.random() * 0xffffff);

	if ( intersects.length > 0 ) {
		if (!intersected){
			intersects[0].object.material.color.setHex( 0x1dff00 );
			console.log(intersects[0]);
			console.log(objectso);

			index = intersects[0].object.index;
			console.log(index);
			var o = objects[index];


			o.setOutlineTween(intersects[0].object);
			/*
			for (var key in intersects[0]) {
			    if (Object.prototype.hasOwnProperty.call(intersects[0], key)) {
			        var val = intersects[0][key];
			        // use val
							console.log(key,  " : ", val);
			    }
			}
			*/
		}
		intersected = true;
	} else {
		intersected = false;
		console.log(index);
		var o = objects[index];
		o.endOutlineTween(objectso[index]);
		index = undefined;
	}
}

function dragStartCallback(event) {
	var index = event.object.index;

	event.object.material.opacity = 0.6;
	for (i=0; i<5; i++) {
			event.object.setOpacityOnOutline(objectso[i]);
	}

	objectso.forEach(( objectOutline ) => {
		if (typeof (objectOutline.cardIndex) !== 'undefined' && objectOutline.cardIndex === index) {
			console.log("working");
			objectOutline.cardIndex = undefined;
		}
	});

	//startColor = event.object.material.color.getHex();
	//event.object.material.color.setHex(0x000000);
	renderer.domElement.style.cursor = 'pointer';
	console.log("sadsadsadasdasdasda",event.object);


	var property = "t" + index;
	var tween = allTweens[property];
	tween["tween0"].stop();
	tweeny.stop();
	//tween["tween2"].stop();




/*
	if ( cursorY > 647 && cursorY < 889 && cursorX > 227 && cursorX < 1694 ) {
		if ( cursorX >= 228 && cursorX <= 517 ) {
			event.object.setOutlineTween(objectso[0]);
			console.log("0 executed");
		} else if ( cursorX >= 518 && cursorX <= 811 ) {
			event.object.setOutlineTween(objectso[1]);
			console.log("1 executed");
		} else if ( cursorX >= 812 && cursorX <= 1105 ) {
			event.object.setOutlineTween(objectso[2]);
			console.log("2 executed");
		} else if ( cursorX >= 1106 && cursorX <= 1399 ) {
			event.object.setOutlineTween(objectso[3]);
			console.log("3 executed");
		} else if ( cursorX >= 1400 && cursorX <= 1693 ) {
			event.object.setOutlineTween(objectso[4]);
			console.log("4 executed");
		}
	}
	*/

}
var tweeny;
function dragendCallback(event) {
	event.object.material.opacity = 1;
	for (i=0; i<5; i++) {
			event.object.removeOpacityOnOutline(objectso[i]);
	}
	//event.object.material.color.setHex(startColor);

	var xpos = event.object.position.x,
			ypos = event.object.position.y,
			zpos = event.object.position.z,
			xrot = event.object.rotation.x,
			zrot = event.object.rotation.z;

	// t position
	var tpos = { x: xpos, y: ypos, z: zpos };
	// t rotation
	var trot = { x: xrot, z: zrot };

	var	target,
			rtarget,
			rtween;
	if (cursorY > 600) {
		// position
		// not saving index when not hovered over cardOutline, which is why cards sometimes land in wrong x coordinate?

		if (index === undefined || index<0 || index>4) {
			var number = event.object.position.x;
	    var curr = coord[0];
			coord.forEach(function(coordinate){
				if (Math.abs(number - coordinate) < Math.abs(number - curr)) {
					curr = coordinate;
				}
			});
			console.log("abc curr " , curr);

		//	console.log("abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc  ");
			var indexFound = coord.indexOf(curr);
			objectso[indexFound].cardIndex = event.object.index;
			console.log("abc indexfound ", indexFound, index);

			target = { x: curr, y: -150, z: 10 };
	 		 tweeny = new TWEEN.Tween(tpos).to(target, 1750)
	 		.onUpdate(function(){
	 				event.object.position.x = tpos.x;
	 				event.object.position.y = tpos.y;
	 				event.object.position.z = tpos.z;
	 				event.object.rotation.x = -1;
	 		})
	 		.easing(TWEEN.Easing.Elastic.Out)
	 		.start();
		} else {
				if (typeof (objectso[index].cardIndex) !== 'undefined') {
					//let rtarget = { x: 0, y: 0, z: 0 };
					var card = objects[objectso[index].cardIndex];
					console.log("card ",card);
					var np = [-1,1],
					   	threshold = [];
					for (i=0;i<11;i++) { threshold.push(0.1*i); }
					tweenRemove(event.object,(threshold[seed(0,10)]*200)*np[seed(0,1)],200,np[seed(0,1)]);
				} else {
					 objectso[index].cardIndex = event.object.index;
					 target = { x: coord[index], y: -150, z: 10 };
					 tweeny = new TWEEN.Tween(tpos).to(target, 1000)
					.onUpdate(function(){
							event.object.position.x = tpos.x;
							event.object.position.y = tpos.y;
							event.object.position.z = tpos.z;
							event.object.rotation.x = -1;
					})
					.easing(TWEEN.Easing.Elastic.Out)
					.start();
				}
		}
		console.log("abc ", objectso);
		// rotation
		 rtarget = { x: -1, z: 0 };
		 rtween = new TWEEN.Tween(trot).to(rtarget, 1750)
		.onUpdate(function(){
				event.object.rotation.z = trot.z;
				event.object.rotation.x = trot.x;
		})
		.easing(TWEEN.Easing.Elastic.Out)
		.start();

	} else {
		// position
		 tpos = { z: zpos };
		 target = {z: -200 };
		 tweeny = new TWEEN.Tween(tpos).to(target, 2000)
		.onUpdate(function(){
				event.object.position.z = tpos.z;
		})
		.easing(TWEEN.Easing.Elastic.Out)
		.start();
		// rotation
		 rtarget = { x: 0, z: 0 };
		 rtween = new TWEEN.Tween(trot).to(rtarget, 2000)
		.onUpdate(function(){
				event.object.rotation.z = trot.z;
				event.object.rotation.x = trot.x;
		})
		.easing(TWEEN.Easing.Elastic.Out)
		.start();
	}
}

function animate() {
	requestAnimationFrame( animate );

	if ( mixers.length > 0 ) {

					for ( var i = 0; i < mixers.length; i ++ ) {

						mixers[ i ].update( clock.getDelta() );

					}

	}

	renderer.render(scene, camera);
	TWEEN.update();
	letters.forEach(function(element) {
		element.rotateY(0.000015*cursorY);
	  element.rotateX(0.000015*cursorX);
		//element.rotateZ(0.0015);
	});

	parent.rotation.z += 0.00001 *cursorX;
	//parent.rotateY(0.000015*cursorY);
	//parent.rotateX(0.000015*cursorX);


};

init();
animate();
